===== Version 4069 =====
2021/01/21

* String multiplication
* Implemented library types: TreeDict, TreeSet
* Bug fixes:
    * Parse error of '< ... >'

===== Version 4068 =====
2021/01/21

* Implemented config loader
* Added a method of class: __superclassOf__

===== Version 4067 =====
2021/01/20

* Implemented a basic decompiler
* Recorded line file information in root block
* Optimize AstBuilder

===== Version 4066 =====
2021/01/20

* Generic array
* Changed some error messages related to types and contracts
* Bug fixes:
    * Parser error when combining 'and', 'or', 'not' with parenthesis

===== Version 4065 =====
2021/01/20

* Implemented library function 'genericDict'

===== Version 4064 =====
2021/01/20

* Added an 'interface' class 'Collection'
* Implemented library type HashSet
* New syntax:
    * HashDict creation via `{k1=v1, k2=v2, ...}`
    * HashDict creation via `{e1, e2, ...}`

===== Version 4063 =====
2021/01/19

* Added new instance attribute: __instance__
* Bug fixes:
    * Resolved issue #C02: generic name conflicting

===== Version 4062 =====
2021/01/19

* Migrated the handler of "x? or y?" from contract to binary operator
* Implemented generic library types in 'lib/lang'

===== Version 4061 =====
2021/01/19

* Implemented generic class
* Added simple inheritance check when dealing with generic classes
* Changed the order of checking contract: set first, then check

===== Version 4060 =====
2021/01/19

* Redesigned the method resolution system: used C3 algorithm
* Parser of templated class

===== Version 4059 =====
2021/01/18

* Generic call for functions

===== Version 4058 =====
2021/01/18

* Added two reflection functions: listAttr, listMethod
* Call method via Clazz.method(obj, ...);

===== Version 4057 =====
2021/01/17

* Renamed 'AbstractObject' to 'Obj'

===== Version 4056 =====
2021/01/17

* Changed mechanism of native object attribute invoke

===== Version 4055 =====
2021/01/16

* Added version check of compiled spl file

===== Version 4054 =====
2021/01/16

* Added docstring system
* Access to class method via 'Object.method'

===== Version 4053 =====
2021/01/16

* Implemented HashDict
* Implemented LinkedList
* Added parameter error check
* Added native error check before 'String' class defined in lib/lang
* Added int overflow check

===== Version 4052 =====
2021/01/15

* Implemented **kwargs
* Added supported of indexing with non-int types
* Added more parameter and argument checks

===== Version 4051 =====
2021/01/14

* Optimized garbage collection system

===== Version 4050 =====
2021/01/14

* Added spl cache compiler, can store compiled spl code as (*.spc)

===== Version 4049 =====
2021/01/14

* Added more functions in lib/math
* Optimized pseudo-random generator
* Bug fixes:
    * Unexpected arithmetic result of float

===== Version 4048 =====
2021/01/13

* Added some functions in lib/math
* Added support of hex, oct, bin numbers
* Bug fixes:
    * Modules importing sequence was unpredictable, causing error if any module was imported before lang
    * Names with number at middle were not recognized

===== Version 4047 =====
2021/01/13

* Reimplemented superclass check
* Added overriding parameters check
* New library function 'strJoin'
* Implemented 'FileReader.read()'
* Implemented output streams
* Added more type checkers
* Minor bugs fix

===== Version 4046 =====
2021/01/12

* Added library function array?(eleType)
* Changed the implementation of array type
* Rewrite io system as streams

===== Version 4045 =====
2021/01/12

* Implemented basic IO

===== Version 4044 =====
2021/01/11

* Added type class of native types
* Added array attribute 'type'
* Implemented operator '!='
* Automatically wraps '==', '!=' to 'is', 'is not' in binary operator of native objects

===== Version 4043 =====
2021/01/11

* Bug fixes:
    * Byte array

===== Version 4042 =====
2021/01/11

* New primitive type: byte
* Minor bugs fix

===== Version 4041 =====
2021/01/10

* GC optimization:
    * Removed gc marks inside each objects

===== Version 4040 =====
2021/01/10

* Bug fixes:
    * Type contract function causes error when calling imported functions
    * Gc error when collecting Object[]: references in array were not moved

===== Version 4039 =====
2021/01/10

* New garbage collection system:
    * Memory is now allocating by a simple pointer 'availableHead', every garbage collect process rearranges the memory
    * Removed 'Invokes.free()'

===== Version 4038 =====
2021/01/10

* GC system rollback

===== Version 4037 =====
2021/01/09

* Updated GC:
    * Added object survive round count to reduce gc-related problems

===== Version 4036 =====
2021/01/08

* IDLE updates: editable, line text colors, etc
* Removed duplicate string literals in memory

===== Version 4035 =====
2021/01/06

* Updated tracing system: added attribute 'pos' for lineFile
* Updated IDLE:
    * Basic code analyzer for spl

===== Version 4034 =====
2021/01/05

* Implemented syntax sugar "while"
* Update console: stderr and stdin
* More on error system change
* Update IDLE:
    * Custom code area
    * Environment viewer

===== Version 4033 =====
2020/12/31

* Implemented builtin function "input"
* Bug fixes: Console returns "undefined" after any error, caused by environment interruption

===== Version 4032 =====
2020/12/31

* Implemented syntax sugar: "or" in contract
* More on error system change
* Renamed "Pointer" to "Reference"

===== Version 4031 =====
2020/12/29

* Changed error system
* Added command line flag -nc or --noContract to disable contract check

===== Version 4030 =====
2020/12/01

* Reflection
    * Added builtin reflection functions:
        * getAttr, setAttr, hasAttr, getClassByName
* Bug fixes:
    * Fixes part of error handling bug: call, new

===== Version 4029 =====
2020/11/30

* New syntax sugar:
    * contract definition in function header: fn foo(a: int) -> int
* Bug fixes:
    * Fixed param contract check out of bound error when default arguments are in use

===== Version 4028 =====
2020/08/17

* Syntax implementation:
    * switch-case
* Changed implementation of cond-case
* Bug fixes:
    * Fixed error when converting boolean to wrapper (caused by Bool.type())


===== Version 4027 =====
2020/08/12

* Syntax update:
    * For each loop without 'var' or 'const'


===== Version 4026 =====
2020/08/12

* Added text processor
* Redesigned import system


===== Version 4025 =====
2020/08/11

* New library function and native call:
    * script(path, *args)
* Changed the argument logic of command line call


===== Version 4024 =====
2020/08/11

* Library updates:
    * Implemented List.remove, List.insert
* Bug fixes:
    * Exception thrown in spl caused java error


===== Version 4023 =====
2020/08/11

* Implemented string escape and char escape


===== Version 4022 =====
2020/08/10

* Console:
    * Implemented basic console functionalities


===== Version 4021 =====
2020/08/10

* Bug fixes:
    * Error: contract error when calling operator function to wrapper


===== Version 4020 =====
2020/08/10

* Implemented method contracts
* Implemented method resolution order
* Deprecated public version of 'callInit', used 'createInstanceWithInitCall' instead
* Changed the evaluation time of contract node, from when it's defined to when it's actually evaluated
* Bug fixes:
    * Inheritance order reversal problem
    * Iterate over array error


===== Version 4019 =====
2020/08/09

* Re-implemented class-method system:
    * Methods are now part of class, not instance
    * Instance method now have a default 'this' parameter in position 0
    * Automatically adds a pointer to 'this' at the first position:
        * instance.call(args...) as call(instance, args...) from dot call
        * call(args...) as call(instance, args...) from inside class call
    * Changed 'getClass' to '__class__', which is a method of 'Object'
    * Added native invoke 'getClass(instance)'
* Not implemented yet:
    * Method contracts
    * mro check


===== Version 4018 =====
2020/08/05

* Separated "__str__" and "__repr__"
* Implemented class.__mro__ (Not finished)
* Changed the char array attribute of String to "__chars__"
* Bug fixes:
    * "super" now refers to the first superclass


===== Version 4017 =====
2020/08/04

* Syntax implemented:
    * Implemented contracts for *args and **kwargs
    * Set item and get item for custom class
    * Logical binary operation of pointers and between primitive and pointers
* Library function implemented:
    * function.sp:
        * foldl, map, all, any


===== Version 4016 =====
2020/08/04

* Implemented new binary operator rule:
    * int int -> int
    * int float -> float
    * float int -> float
    * float float -> float
* Changed 'any' to 'anyType'
* Added builtin function 'void'
* Added native function 'char'
* Bug fixes:
    * Fixed that wrapper may contain wrong type of value
    * Fixed that '_' is identified as int


===== Version 4015 =====
2020/08/03

* Implemented basic wrapper arithmetics (+, -, *, /, %)
* Primitive are converted to wrapper when performing arithmetic with wrappers


===== Version 4014 =====
2020/08/02

* New syntax:
    * Unpack list or array into arguments: 'f(*args)'
* Syntax implementation:
    * Contract definition in class body


===== Version 4013 =====
2020/08/02

* New syntax:
    * New keyword 'yield'
    * Cond-case expression:
        ... = cond {
            case ... -> ...;
            case ... -> {
                ...
                yield ...;
            }
            ...
        }


===== Version 4012 =====
2020/07/29

* Implemented list iterator and range iterator
* Bug fixes:
    * 'is' and 'is not' can now compare any type


===== Version 4011 =====
2020/07/29

* Syntax implementation:
    * For each loop
* Bug fixes:
    * Fixed ISSUE C01 (method inheritance and override)


===== Version 4010 =====
2020/07/28

* Implemented try-catch-finally statement
* Optimization:
    * Changed value of 'BinaryExpr' and 'UnaryExpr' to 'AbstractExpression'


===== Version 4009 =====
2020/07/28

* Logical optimization:
    * Every node class in abstract syntax tree derives from 'AbstractExpression' (non-null return value) or
      'AbstractStatement' (no return value) or 'NonEvaluate' (cannot be evaluated)


===== Build 4008 =====
2020/07/28

* Logical optimization:
    * Every node class in abstract syntax tree derives from 'AbstractExpression' (non-null return value) or
      'AbstractStatement' (no return value)
    * Interface 'Buildable' to replace 'Expr'


===== Build 4007 =====
2020/07/28

* New syntax:
    * Throw statement: 'throw ...'
    * try-catch-finally statement (not implemented)
* Better stack traces
* Function without return statement now returns null


===== Build 4006 =====
 2020/07/26

* New syntax:
    * Direct list creation '[arg1, arg2, ...]'
* Parser update:
    * 'CollectiveElements' now stores traceback information


===== Build 4005 =====
2020/07/26

* Syntax implemented:
    * 'cond', 'case', 'default'
* Library implementations:
    * List

===== Build 4004 =====
2020/07/25

* Syntax implementation:
    * '**kwargs'
* New library class:
    * NaiveDict
* Bug fixes:
    * Continuous if-statements


===== Build 4003 =====
2020/07/23

* New Syntax:
    * '*args'
    * '**kwargs' (not implemented)
* Primitive wrapper:
    * Integer, Float, Boolean, Character
* Implementation change:
    * Changed implementation of 'var', 'const'
    * Functions now all take 'EvaluatedArgument' as arguments instead of 'SplElements[]'
* Bug fixes:
    * For loop init part now not have to be 'AbstractExpression'


===== Build 4002 =====
2020/07/22

* Syntax implementation:
    * Quick assignment ':='
* New syntax:
    * true_expr if condition else false_expr
    * Changed '&&', '||', '!' to 'and', 'or', 'not'
    * '==', '!=' now replaced by 'is', 'is not' in pointer logic.


===== Build 4001 =====
2020/07/21

* Performance optimization:
    * Reworked on head memory object types, removed array element wrappers
* Created AbstractExpression as the superclass of all Nodes that must evaluates a value
* Implemented lambda expressions


===== Build 4000 =====
2020/07/21

* Completed function calls
* Constant parameters
* Integer with '_'
* Undefined
